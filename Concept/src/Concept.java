
public class Concept {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		/*
		 * 객체지향
		 * 객체지향이란?
		 * 대표적 특징 : 상속, 캡슐화, 추상화
		 * 기존의 프로그래밍 언어와 전혀 다른 새로운 것이 아니라, 기존의 프로그래밍 언어에 몇 가지 새로운 
		 * 규칙을 추가한, 보다 발전된 형태의것
		 * 
		 * 주요특징
		 * 1. 코드의 재사용성이 높다.
		 * 새로운 코드를 작성할 떄 기존의 코드르르 이용하여 쉽게 작성할 수 있다.
		 * 2. 코드간의 관리가 용이하다
		 * 코드간의 관계를 이용해서 적은 노력으로 쉽게 코드를 변경할 수 있다.
		 * 3. 신뢰성이 높은 프로그래밍을 가능하게 한다.
		 * 제어자와 메서드를 이용해서 테이터를 보호하고 올바른 값을 유지하도록 하며, 코드의 중복을
		 * 제거하여 코드의 불일치로 인한 오작동을 방지할 수 있다.
		 * 
		 * 클래스와 객체
		 * 
		 * 클래스란? 객체를 정의해 놓은 것 또는 객체의 설계도 또는 들
		 * 클래스의 정의 - 클래스란 객체를 정의해 놓은 것이다.
		 * 클래스의 용도 - 클래스는 객체를 생성하는데 사용된다.
		 * 
		 *객체란?
		 *객체의 정의 - 실제로 존재하는 것 사물 또는 개념
		 *객체의 용도 - 객체가 가지고 있는 기능과 속성에 따라 다름
		 * ex:
    	*		유형의 객체 - 책상, 의자, 자동차와 같은 사물
	    *		무형의 객체 - 수학공식, 시간 같은 논리나 개념
	    *
	    * 객체지향?
	    * 클래스 -> 객체
	    * c언어, 어셈블리어, cobor vs 자바, c++, c#
	    * 절차지향 vs 객체지향
	    * 순서가 있다 : 순서가 없다?
	    * 재사용성이 낮다 : 재사용성이 높다
	    * 
	    * 
	    * 클래스의 또 다른 정의
	    * 1. 변수 - 하나의 데이터를 저장할 수 있는 공간
	    * 2. 배역 - 같은 종류의 여러 데이터를 하나의 집합으로 저장할 수 있는 공간
	    * 3. 구조체 - 서로 관련된 여러 데이터를 종류에 관계없이 하나의 집합으로 저장할 수 있는 공간
	    * 4. 클래스(user-defined type) - 데이터와 함수의 결합(구조체 + 함수)
	    * 
	    * 
	    * 
	    * 
	    * 
	    * 
	    * 
	    * 
	    * 
	    * 
	     
     	 */
		
		
		

	}

}
